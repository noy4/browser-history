import fs from 'node:fs'
import path from 'node:path'
import process from 'node:process'
import builtins from 'builtin-modules'
import esbuild from 'esbuild'

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

const prod = (process.argv[2] === 'production')

// ref. https://github.com/fenjalien/obsidian-typst/blob/master/esbuild.config.mjs
const wasmPlugin = {
  name: 'wasm',
  setup(build) {
    // Resolve ".wasm" files to a path with a namespace
    build.onResolve({ filter: /\.wasm$/ }, (args) => {
      if (args.resolveDir === '') {
        return // Ignore unresolvable paths
      }
      return {
        path: path.isAbsolute(args.path) ? args.path : path.join(args.resolveDir, args.path),
        namespace: 'wasm-binary',
      }
    })
    // Virtual modules in the "wasm-binary" namespace contain the
    // actual bytes of the WebAssembly file. This uses esbuild's
    // built-in "binary" loader instead of manually embedding the
    // binary data inside JavaScript code ourselves.
    build.onLoad({ filter: /.*/, namespace: 'wasm-binary' }, async args => ({
      contents: await fs.promises.readFile(args.path),
      loader: 'binary',
    }))
  },
}

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['main.ts'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'main.js',
  minify: prod,
  plugins: [wasmPlugin],
  // The package "node:fs" wasn't found on the file system but is built into node.
  // Are you trying to bundle for node? You can use "platform: 'node'" to do that,
  // which will remove this error.
  platform: 'node',
})

if (prod) {
  await context.rebuild()
  process.exit(0)
}
else {
  await context.watch()
}
